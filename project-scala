#!/bin/bash --posix

SOURCE=$0;
SCRIPT=`basename "$SOURCE"`;
while [ -h "$SOURCE" ]; do
    SCRIPT=`basename "$SOURCE"`;
    LOOKUP=`ls -ld "$SOURCE"`;
    TARGET=`expr "$LOOKUP" : '.*-> \(.*\)$'`;
    if expr "${TARGET:-.}/" : '/.*/$' > /dev/null; then
        SOURCE=${TARGET:-.};
    else
        SOURCE=`dirname "$SOURCE"`/${TARGET:-.};
    fi;
done;

PROJECT_DIR=`dirname "$SOURCE"`
PROJECT_DIR=`cd "$PROJECT_DIR"; pwd -P`


if [ ! -f "${PROJECT_DIR}/project/build.properties" ] ; then
	echo "ERROR: Missing file 'project/build.properties' - invalid sbt project dir or build not run yet?" 1>&2
	exit 1
fi

export SBT_VERSION=`cat "${PROJECT_DIR}/project/build.properties" | grep 'sbt.version' | sed 's/^.*=\([^[:space:]]\+\).*/\1/'`
export SCALA_VERSION=`cat "${PROJECT_DIR}/project/build.properties" | grep 'build.scala.versions' | sed 's/^.*=\([^[:space:]]\+\).*/\1/'`

if [ "${SCALA_VERSION}" = "" ] ; then
	echo "ERROR: Could not determine target Scala version." 1>&2
	exit 1
fi

if [ "${SBT_VERSION}" = "" ] ; then
	echo "ERROR: Could not determine SBT version." 1>&2
	exit 1
fi


SBT_JAR="${PROJECT_DIR}/project/boot/sbt-launch-${SBT_VERSION}.jar"


if [ ! -d "${PROJECT_DIR}/target" ] ; then
	echo "ERROR: Missing target directory - invalid sbt project dir or build not run yet?" 1>&2
	exit 1
fi

SBT_TARGET="${PROJECT_DIR}/target/scala_${SCALA_VERSION}"
SBT_LIB="${PROJECT_DIR}/lib/*"
SBT_LIB_MANAGED="${PROJECT_DIR}/lib_managed/scala_${SCALA_VERSION}/compile/*:${PROJECT_DIR}/lib_managed/scala_${SCALA_VERSION}/runtime/*:${PROJECT_DIR}/lib_managed/scala_${SCALA_VERSION}/plugin/*"
SBT_LIB_SCALA="${PROJECT_DIR}/project/boot/scala-${SCALA_VERSION}/lib/*"
if [ ! -d "${SBT_TARGET}" ] ; then
	echo "ERROR: Missing target directory \"${SBT_TARGET}\"." 1>&2
else
	# Need sbt-launcher JAR in the classpath to get jline
	export TOOL_CLASSPATH="${PROJECT_DIR}:${SBT_TARGET}/*:${SBT_LIB}:${SBT_LIB_MANAGED}:${SBT_LIB_SCALA}:${SBT_JAR}"
fi



##############################################################################
# Modified version of scala-2.9.0 start script
# Original copyright 2002-2011, LAMP/EPFL
##############################################################################


# Not sure what the right default is here: trying nonzero.
scala_exit_status=127
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
  if [[ -n $SCALA_RUNNER_DEBUG ]]; then
    echo "restoring stty: $saved_stty"
  fi
    
  stty $saved_stty
  saved_stty=""
}

function onExit() {
  if [[ "$saved_stty" != "" ]]; then
    restoreSttySettings
    exit $scala_exit_status
  fi
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)
# clear on error so we don't later try to restore them
if [[ ! $? ]]; then  
  saved_stty=""
fi
if [[ -n $SCALA_RUNNER_DEBUG ]]; then
  echo "saved stty: $saved_stty"
fi

cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true ;;
esac


[ -n "$JAVA_OPTS" ] || JAVA_OPTS="-Xmx256M -Xms32M"

# break out -D and -J options and add them to JAVA_OPTS as well
# so they reach the underlying JVM in time to do some good.  The
# -D options will be available as system properties.
declare -a java_args
declare -a scala_args

# default to the boot classpath for speed.
CPSELECT="-classpath "

while [ $# -gt 0 ]; do
  case "$1" in
    -D*)
      # pass to scala as well: otherwise we lose it sometimes when we
      # need it, e.g. communicating with a server compiler.
      java_args=("${java_args[@]}" "$1")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -J*)
      # as with -D, pass to scala even though it will almost
      # never be used.
      java_args=("${java_args[@]}" "${1:2}")
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
    -toolcp)
      TOOL_CLASSPATH="$TOOL_CLASSPATH:$2"
      shift 2
      ;;
    -nobootcp)
      CPSELECT="-classpath "
      shift
      ;;
    *)
      scala_args=("${scala_args[@]}" "$1")
      shift
      ;;
  esac
done

# reset "$@" to the remaining args
set -- "${scala_args[@]}"

if [ -z "$JAVACMD" -a -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi

"${JAVACMD:=java}" \
  $JAVA_OPTS \
  "${java_args[@]}" \
  ${CPSELECT}${TOOL_CLASSPATH} \
  -Dscala.usejavacp=true \
  -Denv.emacs="$EMACS" \
  $CYGWIN_JLINE_TERMINAL \
   scala.tools.nsc.MainGenericRunner  "$@"

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
